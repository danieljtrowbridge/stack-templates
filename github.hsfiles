{-# START_FILE .github/workflows/ci.yaml #-}
---

name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  ci:
    name: CI
    uses: danieljtrowbridge/hs-config/.github/workflows/ci.yaml@main
    with:
      ghc-version: {{ghc-version}}
      package: {{name}}

{-# START_FILE .gitignore #-}
*~
.stack-work/

{-# START_FILE init.sh #-}
# Create a Git repository.
git init

# Configure Git to use the provided email and name.
git config --local user.email "{{author-email}}"
git config --local user.name "{{author-name}}"

# Add the hs-config repository as a Git submodule.
git submodule add -b main --name config \
    https://github.com/danieljtrowbridge/hs-config.git config

# Add symlinks to the linter configuration files in the submodule.
ln -s config/.yamllint.yaml
ln -s config/fourmolu.yaml

# Generate stack.yaml.lock.
stack path >/dev/null

# Delete this initialisation script.
rm init.sh

# Stage the template files.
git add .

# Output the status of the Git repository.
git status

{-# START_FILE {{name}}/Setup.hs #-}
import Distribution.Simple (defaultMain)

main :: IO ()
main = defaultMain

{-# START_FILE {{name}}/package.yaml #-}
---

name: {{name}}
version: 0.1.0.0

author: {{author-name}}
copyright: {{year}} {{author-name}}
github: {{github-username}}/{{name}}/{{name}}
maintainer: {{author-email}}

dependencies:
  - base >= 4.7 && < 5

ghc-options:
  - -Wall
  - -Wcompat
  - -Widentities
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wmissing-export-lists
  - -Wmissing-home-modules
  - -Wpartial-fields
  - -Wredundant-constraints

library:
  source-dirs:
    - src

tests:
  spec:
    dependencies:
      - {{name}}
    main: Main.hs
    source-dirs:
      - test

{-# START_FILE {{name}}/src/.gitkeep #-}

{-# START_FILE {{name}}/test/Main.hs #-}
module Main (main) where

main :: IO ()
main = putStrLn "Test suite not yet implemented"
